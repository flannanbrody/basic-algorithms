===========================================================
===========================================================
Longest Path in a Directed Acyclic Graph
===========================================================
===========================================================
Given a Weighted Directed Acyclic Graph (DAG) and a source vertex s in it, find the longest distances from s to all other 
vertices in the given graph.

The longest path problem for a general graph is not as easy as the shortest path problem because the longest path problem 
doesn’t have optimal substructure property. In fact, the Longest Path problem is NP-Hard for a general graph. However, the 
longest path problem has a linear time solution for directed acyclic graphs. The idea is similar to linear time solution for 
shortest path in a directed acyclic graph., we use Tological Sorting.

We initialize distances to all vertices as minus infinite and distance to source as 0, then we find a topological sorting of 
the graph. Topological Sorting of a graph represents a linear ordering of the graph (See below, figure (b) is a linear 
representation of figure (a) ). Once we have topological order (or linear representation), we one by one process all vertices 
in topological order. For every vertex being processed, we update distances of its adjacent using distance of current vertex.

Following figure shows step by step process of finding longest paths.


===========================================================
===========================================================
Fleury’s Algorithm for printing Eulerian Path or Circuit
===========================================================
===========================================================
Eulerian Path is a path in graph that visits every edge exactly once. Eulerian Circuit is an Eulerian Path which starts and 
ends on the same vertex.

We strongly recommend to first read the following post on Euler Path and Circuit.
http://www.geeksforgeeks.org/eulerian-path-and-circuit/

In the above mentioned post, we discussed the problem of finding out whether a given graph is Eulerian or not. In this post, 
an algorithm to print Eulerian trail or circuit is discussed.

Following is Fleury’s Algorithm for printing Eulerian trail or cycle (Source Ref1).

1. Make sure the graph has either 0 or 2 odd vertices.

2. If there are 0 odd vertices, start anywhere. If there are 2 odd vertices, start at one of them.

3. Follow edges one at a time. If you have a choice between a bridge and a non-bridge, always choose the non-bridge.

4. Stop when you run out of edges.

The idea is, “don’t burn bridges“ so that we can come back to a vertex and traverse remaining edges. For example let us 
consider the following graph.




===========================================================
===========================================================
Find minimum s-t cut in a flow network
===========================================================
===========================================================
In a flow network, an s-t cut is a cut that requires the source ‘s’ and the sink ‘t’ to be in different subsets, and it 
consists of edges going from the source’s side to the sink’s side. The capacity of an s-t cut is defined by the sum of 
capacity of each edge in the cut-set. (Source: Wiki)
The problem discussed here is to find minimum capacity s-t cut of the given network. Expected output is all edges of the 
minimum cut.

For example, in the following flow network, example s-t cuts are {{0 ,1}, {0, 2}}, {{0, 2}, {1, 2}, {1, 3}}, etc. The 
minimum s-t cut is {{1, 3}, {4, 3}, {4 5}} which has capacity as 12+7+4 = 23.

minCut

We strongly recommend to read the below post first.
Ford-Fulkerson Algorithm for Maximum Flow Problem

Minimum Cut and Maximum Flow
Like Maximum Bipartite Matching, this is another problem which can solved using Ford-Fulkerson Algorithm. This is based on 
max-flow min-cut theorem.

The max-flow min-cut theorem states that in a flow network, the amount of maximum flow is equal to capacity of the minimum 
cut. See CLRS book for proof of this theorem.

From Ford-Fulkerson, we get capacity of minimum cut. How to print all edges that form the minimum cut? The idea is to use 
residual graph.

Following are steps to print all edges of minimum cut.

1) Run Ford-Fulkerson algorithm and consider the final residual graph.

2) Find the set of vertices that are reachable from source in the residual graph.

3) All edges which are from a reachable vertex to non-reachable vertex are minimum cut edges. Print all such edges.









