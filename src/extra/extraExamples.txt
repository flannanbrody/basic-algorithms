========================================
Stream: median in stream of numbers.
========================================

Find the median in stream of numbers.


You have to maintain two heaps one max heap ( which contains the smallest N/2 elements seen till now) and one min heap ( which contains the largest N/2 elements).
Always make sure following holds
Math.abs(sizeof (max-heap) - sizeof(min-heap)) <= 1


Get Median: O(1)
If N is odd, the median is root of the heap max elements among max/min heap.
If N is even, the median is the average between the tops of the 2 heaps.


Lets trace with following stream
S = 9, 8, 2, 7, 6, 5, 3 ...


data: 9
Max heap =   9
Min heap =      -
current median = 9


data: 8
Max heap =    
     9
---------
8
Now Max heap size (2) - min-heap size (0) is > 1
So lets remove the root of max and send it to min-heap
Max heap now:  8
Min heap:  9
current median = (8+9)/2


========================================

========================================
Stream: Minimum element in sliding window

You are given an array of size n (may be a stream also). You have a sliding window of size k. The window first boxes the first k elements of the array and slides slowly over the array by 
shifting its position 1 element each time. At each position of the array, you need to find the minimum element in the sliding window. i.e. you need to give the minimum of 0 to k-1 elements,
then 1 to k elements, 2 to k+1 elements etc. So if your array's size is n, you have to give me n-k+1 minimum values.
E.g. Assume that the array is 5,1,3,2,6,8,4,6, and the window size is 3
You should give me 1,1,2,2,4,4. How will you give it?





Alternatives

There are two obvious alternatives to the ascending minima algorithm. The first is a simple "track the minimum" scheme. The second is to use a heap.
Track the minimum

In the first the plan is to locate the minimum in the window. When the window moves there are three possible actions. These are:
If the current minimum is deleted we scan the window to find the new minimum.
If the newly added value is less than or equal to the current minimum, mark it as the current minimum.
Otherwise do nothing.
Evidently the expected cost depends on how often we have to rescan the window. One might argue that the average cost is O(1) since on average the minimum will be located at the midpoint 
of window when we scan. The idea is that the frequency of scans is 2/k with a cost per scan of O(k*2/k) = O(1). A more legitimate form of this argument is to assume that all locations are 
equally likely. In such case the cost is O(1+1/2+...+1/k) = O(log k).

There is a catch. If the wavelength of the data is longer than the window, i.e., if there are stretches longer than the window of mostly increasing data and of mostly decreasing data, the 
cost will be O(k). The reason is that in increasing stretches the next minimum is regularly very close to the beginning of the window, so the increasing stretches are O(k). Of course the 
decreasing stretches are O(1) but the average is O(k).

Use a heap

The second alternative is to put the window values in a heap. There will need to be a mapping from window position to location within the heap. This can be handled with a linked list; 
the mechanics are O(1). When the window is updated, the deleted item is removed from the heap and is replaced with the added item, which is then sifted up or down as needed.
If the distribution of the values being inserted is random and unbiased, the average cost of updating the heap is O(1). Again there is a catch, and it is the same catch. When the data 
is mostly increasing the root is regularly deleted and the cost of updating the heap is O(log k).

Conclusion

The upshot is that the time costs are:

Algorithm   Random    Mostly increasing 
Ascending minima: O(1)  O(1)
Use a heap: O(1) O(log k)
Track the minimum:  O(log k) O(k)
The "track the minimum" algorithm has the advantages of being simple and cache friendly. However its performance can be very bad for large k. Using a heap is a viable alternative; it is a 
familiar data structure and the performance is not horrid. However using a heap is more complicated than the "ascending minima" algorithm and its performance is worse.

In many applications it probably won't matter which algorithm is used - the cost for computing the minimum on a sliding window will be small compared to other costs. None-the-less, it is 
as easy to use the better algorithm as the worse, and sometimes the costs do matter.






